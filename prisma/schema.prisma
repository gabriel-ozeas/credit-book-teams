generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model User {
  id             Int        @default(autoincrement()) @id
  name           String?
  email          String?    @unique
  emailVerified  DateTime?  @map(name: "email_verified")
  image          String?
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @default(now()) @map(name: "updated_at")
  defaultTeamId  String?    @map(name: "default_team_id")
  defaultTeam    Team?      @relation("DefaultTeam", fields: [defaultTeamId], references: [id])
  teams          UserTeam[]
  claimedCredits Credit[]   @relation("ClaimedCredits")
  createdCredits Credit[]   @relation("CreatedCredits")
  updatedCredits Credit[]   @relation("UpdatedCredits")
  @@map(name: "users")
}

model Team {
  id                 String     @default(uuid()) @id
  joinCode           String?    @unique @map(name: "join_code")
  joinCodeExpiration DateTime?  @map(name: "join_code_expiration")
  joinAttempts       Int?       @map(name: "join_attempts")
  teamName           String     @map(name: "team_name")
  credits            Credit[]
  users              UserTeam[]
  usesAsDefaultTeam  User[]     @relation("DefaultTeam")

  @@map(name: "teams")
}

model UserTeam {
  role   String @map(name: "role")
  teamId String @map(name: "team_id")
  team   Team   @relation(fields: [teamId], references: [id])
  userId Int    @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@map(name: "user_teams")

}

model Credit {
  id          String    @default(uuid()) @id
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  createdById Int?      @map(name: "created_by_id")
  createdBy   User?     @relation("CreatedCredits", fields: [createdById], references: [id])
  claimedAt   DateTime? @map(name: "claimed_at")
  claimedById Int?      @map(name: "claimed_by_id")
  claimedBy   User?     @relation("ClaimedCredits", fields: [claimedById], references: [id])
  updatedAt   DateTime? @map(name: "updated_at")
  updatedById Int?      @map(name: "updated_by_id")
  updatedBy   User?     @relation("UpdatedCredits", fields: [updatedById], references: [id])
  dollarValue Int?      @map(name: "dollar_value")
  itemValue   String?   @map(name: "item_value")
  name        String?
  phone       String?
  reason      String?
  writtenOnSharedBy String? @map(name: "written_on_shared_by")
  claimedOnSharedBy String? @map(name: "claimed_on_shared_by")
  teamId      String    @map(name: "team_id")
  team        Team      @relation(fields: [teamId], references: [id])

  @@map(name: "credits")
}
